package Chassis
public
  with Base_Types, Data_Model;
  
  system Chassis_System
  end Chassis_System;

  system implementation Chassis_System.i
  	  subcomponents
  		  chassis_process: process Chassis_Process.i;
  end Chassis_System.i;
  
  process Chassis_Process
  end Chassis_Process;

  process implementation Chassis_Process.i
  	  subcomponents
  		  producer: thread Producer.i;
  		  consumer: thread Consumer.i;
  	  connections
  		  c1: port producer.ChassisSwitches -> consumer.ChassisSwitches;
  		  c2: port producer.UpdatedChassisSwitches -> consumer.UpdatedChassisSwitches;
  end Chassis_Process.i;

  -- represent CPAL producer
  thread Producer
    features
      ChassisSwitches : out data port Switches;
      UpdatedChassisSwitches: out event port;
    properties
      Dispatch_Protocol => Periodic;
      Period => 10 ms;
   end Producer;

  thread implementation Producer.i
  end Producer.i;
  
  -- represent medical function consumption 
  thread Consumer
    features
      ChassisSwitches: in data port Switches;
      UpdatedChassisSwitches: in event port;
  	properties
      Dispatch_Protocol => Sporadic;
      Period => 10 ms;  		
  end Consumer;

  thread implementation Consumer.i
  end Consumer.i;
  
  data Switches
  properties
    Data_Model::Data_Representation => Struct;
    Data_Model::Element_Names => ("vialPresent","resvDoorOpen","resvDoorOpen", "pbolusRequest");
    Data_Model::Base_Type => ( 
        classifier(Base_Types::Boolean),  classifier(Base_Types::Boolean), 
        classifier(Base_Types::Boolean), classifier(Base_Types::Boolean));
  end Switches;

end Chassis;
